/*
 * Copyright (c) 2017 Apple Inc. All rights reserved.
 *
 * @APPLE_OSREFERENCE_LICENSE_HEADER_START@
 * 
 * This file contains Original Code and/or Modifications of Original Code
 * as defined in and that are subject to the Apple Public Source License
 * Version 2.0 (the 'License'). You may not use this file except in
 * compliance with the License. The rights granted to you under the License
 * may not be used to create, or enable the creation or redistribution of,
 * unlawful or unlicensed copies of an Apple operating system, or to
 * circumvent, violate, or enable the circumvention or violation of, any
 * terms of an Apple operating system software license agreement.
 * 
 * Please obtain a copy of the License at
 * http://www.opensource.apple.com/apsl/ and read it before using this file.
 * 
 * The Original Code and all software distributed under the License are
 * distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
 * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
 * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
 * Please see the License for the specific language governing rights and
 * limitations under the License.
 * 
 * @APPLE_OSREFERENCE_LICENSE_HEADER_END@
 */

subsystem
#if	KERNEL_SERVER || KOBJECT_SERVER
	KernelServer
#endif	/* KERNEL_SERVER || KOBJECT_SERVER */
       memory_entry 4900;

#include <mach/std_types.defs>
#include <mach/mach_types.defs>
#include <mach_debug/mach_debug_types.defs>

routine mach_memory_entry_purgable_control(
		mem_entry	: mem_entry_name_port_t;
		control		: vm_purgable_t;
	inout	state		: int);

routine mach_memory_entry_access_tracking(
		mem_entry		: mem_entry_name_port_t;
	inout	access_tracking		: int;
	out	access_tracking_reads	: uint32_t;
	out	access_tracking_writes	: uint32_t);

#if KERNEL_SERVER && !SANDBOX_COMPILER
routine mach_memory_entry_ownership_from_user(
		mem_entry	: mem_entry_name_port_t;
		owner       : mach_port_t; /* Task identity token or task control */
#else
routine mach_memory_entry_ownership(
		mem_entry	: mem_entry_name_port_t;
		owner		: task_t;
#endif
		ledger_tag	: int;
		ledger_flags	: int);

/// Query the residency of the physical memory backing a given memory entry.
///
/// This operation is only supported on "named" memory entries created with
/// `MAP_MEM_NAMED_CREATE`. It is unsupported on "mappings" created with
/// `MAP_MEM_COPY` or `MAM_MEM_SHARED`
///
/// - Parameters
///   - mem_entry: The memory entry to query
///   - resident_cnt: If non-null, the number of resident pages written out
///   - dirty_cnt: If non-null, the number of resident, modified pages written out
///   - swapped_cnt: If non-null, the number of evicted pages written out
routine mach_memory_entry_get_page_counts(
		mem_entry	: mem_entry_name_port_t;
	out	resident_cnt	: uint64_t;
	out	dirty_cnt	: uint64_t;
	out	swapped_cnt	: uint64_t);

